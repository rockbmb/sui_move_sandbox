/*
IMPORTANT

1. Sui smart contracts are represented by immutable package objects consisting of a
   collection of Move modules.

2. Because the packages are immutable, transactions can safely access smart contracts
   without full consensus (fast-path transactions).
   - If someone could change these packages, they would become **shared** objects, which
     would require full consensus before completing a transaction.
     
3. When you create packages that involve shared objects, you need to think about
   upgrades and versioning from the start given that all prior versions of a
   package still exist on-chain.
   - A useful pattern is to introduce **versioning** to the shared object and using
     a version check to guard access to functions in the package.
   - This enables you to limit access to the shared object to only the latest version of
     a package.
*/

module first_package::my_module {

    // Part 1: Imports
    //
    // From the chapter:
    // Code reuse is a necessity in modern programming.
    //
    // Sui Move supports this concept with imports that allow your module to use
    // types and functions declared in other modules.
    //
    // In this example, the module imports from object, transfer, and tx_content modules.
    //
    // These modules are available to the package because the Move.toml file defines the Sui
    // dependency (along with the sui named address) where they are defined.
    use sui::object::{Self, UID};
    use sui::transfer;
    use sui::tx_context::{Self, TxContext};

    // Part 2: Struct definitions
    //
    // Structs define types that a module can create or destroy.
    //
    // Struct definitions can include abilities provided with the has keyword.
    //
    // The structs in this example, for instance, have the key ability, which
    // indicates that these structs are Sui objects that you can transfer between
    // addresses.
    //
    // The store ability on the structs provide the ability to appear in other struct
    // fields and be transferred freely.
    //
    /// Reader's note: because `Sword has key, store`, then it is a Sui object.
    struct Sword has key, store {
        id: UID,
        magic: u64,
        strength: u64,
    }

    /// Same goes for `Forge`: `has key, store` => is a Sui object.
    struct Forge has key, store {
        id: UID,
        swords_created: u64,
    }

    // Part 3: Module initializer to be executed when this module is published
    //
    // Initializers are special functions that are invoked exactly once when the
    // module publishes.
    fun init(ctx: &mut TxContext) {
        // From https://docs.sui.io/learn/objects#object-metadata:
        // > An object ID is derived from the digest of the transaction that
        // > created the object and from a counter encoding the number of IDs
        // > generated by the transaction.
        let admin = Forge {
            id: object::new(ctx),
            swords_created: 0,
        };
        // Transfer the forge object to the module/package publisher
        transfer::transfer(admin, tx_context::sender(ctx));
    }

    // Part 4: Accessors required to read the struct attributes
    //
    // Reader's note: recall that module fields are private to accesses from
    // outside this module, without exception.
    // The only way to circumvent this is to expose, via the module's API,
    // public getters/setters.
    //
    // From the tutorial:
    //
    // > These functions - "accessor functions" - allow the fields of the module's
    // > structs to be read from other modules.
    public fun magic(self: &Sword): u64 {
        self.magic
    }

    public fun strength(self: &Sword): u64 {
        self.strength
    }

    public fun swords_created(self: &Forge): u64 {
        self.swords_created
    }

    // Part 5: Public/entry functions (introduced later in the tutorial)
    public entry fun sword_create(
        forge: &mut Forge,
        magic: u64,
        strength: u64,
        recipient: address,
        ctx: &mut TxContext
    ) {
        use sui::transfer;

        // create a sword
        let sword = Sword {
            id: object::new(ctx),
            magic,
            strength,
        };
        // transfer the sword
        transfer::transfer(sword, recipient);

        forge.swords_created = forge.swords_created + 1;
    }

    public entry fun sword_transfer(sword: Sword, recipient: address, _ctx: &mut TxContext) {
        use sui::transfer;
        // transfer the sword
        transfer::transfer(sword, recipient);
    }

    // Part 6: Private functions (if any)

    #[test]
    /// Test sword (asset) creation
    public fun test_sword_create() {
        use sui::transfer;
        use sui::tx_context;

        // Create a dummy TxContext for testing
        let ctx = tx_context::dummy();

        // Create a sword
        let sword = Sword {
            id: object::new(&mut ctx),
            magic: 42,
            strength: 7
        };

        // Check if accessor functions return correct values
        assert!(magic(&sword) == 42 && strength(&sword) == 7, 1);

        // Create a dummy address and transfer the sword, since 
        // swords, being objects, cannot be dropped.
        //
        // * It's worth repeating that since this test lives within the module
        //   where `Sword` is defined, it could have simply been destructured with
        //   pattern matching;
        // * this, however, would not be an option to users of this module,
        //   which is why it's worth emulating their only solution, which is transfer
        let dummy_address = @0xCAFE;
        transfer::transfer(sword, dummy_address);
    }

    #[test]
    /// IMPORTANT
    /// Transaction effects, such as object creation and transfer become visible
    /// only after a given transaction completes.
    ///
    /// For example,
    /// * if the second transaction in the running example created a sword and
    ///   transferred it to the administrator's address, it would only become available
    ///   for retrieval from the administrator's address, via:
    ///   - `test_scenario`,
    ///   - `take_from_sender`, or
    ///   - `take_from_address` functions
    ///   in the third transaction.
    fun test_sword_transactions() {
        use sui::test_scenario;

        // create test addresses representing users
        let admin = @0xBABE;
        let initial_owner = @0xCAFE;
        let final_owner = @0xFACE;

        //
        // > In pure Move there is no notion of Sui storage; consequently, there
        // > is no easy way for the emulated Sui transaction to retrieve it from
        // > storage
        // >
        // > This is where the test_scenario module helps - its `take_from_sender`
        // > function allows an object of a given type (Sword) that is owned by an
        // > address executing the current transaction to be available for Move code
        // > manipulation.
        
        // first transaction to emulate module initialization
        let scenario_val = test_scenario::begin(admin);
        let scenario = &mut scenario_val;
        {
            init(test_scenario::ctx(scenario));
        };

        // second transaction executed by admin to create the sword
        test_scenario::next_tx(scenario, admin);
        {
            // 1. this tx's sender is the admin, so `take_from_sender<Forge>`
            //    can be used to retrive the forge...
            let forge = test_scenario::take_from_sender<Forge>(scenario);
            // create the sword and transfer it to the initial owner
            // 2. ... in order to increment the forge's sword creation counter ...
            sword_create(&mut forge, 42, 7, initial_owner, test_scenario::ctx(scenario));

            // 3. ... and then return the forge to the admin when done.
            test_scenario::return_to_sender(scenario, forge);
        };

        // third transaction executed by the initial sword owner
        test_scenario::next_tx(scenario, initial_owner);
        {
            // extract the sword owned by the initial owner
            let sword = test_scenario::take_from_sender<Sword>(scenario);
            // transfer the sword to the final owner
            sword_transfer(sword, final_owner, test_scenario::ctx(scenario))
        };

        // fourth transaction executed by the final sword owner
        test_scenario::next_tx(scenario, final_owner);
        {
            // extract the sword owned by the final owner
            let sword = test_scenario::take_from_sender<Sword>(scenario);
            // verify that the sword has expected properties
            assert!(magic(&sword) == 42 && strength(&sword) == 7, 1);
            // return the sword to the object pool (it cannot be simply "dropped")
            test_scenario::return_to_sender(scenario, sword)
        };
        test_scenario::end(scenario_val);
    }

    #[test]
    public fun test_module_init() {
        use sui::test_scenario;

        // Create test address representing game admin
        let admin = @0xBABE;

        // First transaction to emulate module initialization
        let scenario_val = test_scenario::begin(admin);
        let scenario = &mut scenario_val;
        {
            init(test_scenario::ctx(scenario));
        };
        // Second transaction to check if the forge has been created
        // and has initial value of zero swords created
        test_scenario::next_tx(scenario, admin);
        {
            // Extract the Forge object
            let forge = test_scenario::take_from_sender<Forge>(scenario);
            // Verify number of created swords
            assert!(swords_created(&forge) == 0, 1);
            // Return the Forge object to the object pool
            test_scenario::return_to_sender(scenario, forge);
        };
        test_scenario::end(scenario_val);
    }


}